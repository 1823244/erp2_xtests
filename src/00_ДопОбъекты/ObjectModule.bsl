Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;

Перем СтруктураДанных;

#Область ЮнитТестирование

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.Добавить("Статьи");
	НаборТестов.Добавить("Организация");
	НаборТестов.Добавить("Подразделение");
	НаборТестов.Добавить("Склады");
	НаборТестов.Добавить("Контрагенты");
	НаборТестов.Добавить("Номенклатура");
	НаборТестов.Добавить("ГрафикРаботыПредприятия");
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Функция РазрешенСлучайныйПорядокВыполненияТестов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

Процедура Организация() Экспорт
	
	Массив = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Организация");
	
КонецПроцедуры

Процедура Подразделение() Экспорт
	
	Массив = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Подразделение");
	
КонецПроцедуры

Процедура Номенклатура() Экспорт
	
	Массив = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "ВидыНоменклатуры,Номенклатура");
	
КонецПроцедуры

Процедура Статьи() Экспорт
	
	Массив = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Статьи");
	
КонецПроцедуры

Процедура Контрагенты() Экспорт
	
	Массив = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Контрагенты");
	
КонецПроцедуры

Процедура Склады() Экспорт
	
	Массив = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Склады");
	
КонецПроцедуры

Процедура ГрафикРаботыПредприятия() Экспорт
	
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		ВызватьИсключение "Не указан основной график работы предприятия" + Символы.ПС +
		"НСИ и Администрирование > Настройки параметров системы > Предприятие > Орнгаизации > График работы предприятия";
	КонецЕсли;	
	
	ДанныеПроизводственногоКалендаря = Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(Календарь.ПроизводственныйКалендарь, 2016);
	Если ДанныеПроизводственногоКалендаря.Количество() = 0 Тогда
		ДанныеПроизводственногоКалендаря = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию(Календарь.ПроизводственныйКалендарь.Код, 2016);
		Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(Календарь.ПроизводственныйКалендарь, 2016, ДанныеПроизводственногоКалендаря);
	КонецЕсли;	
	
	КалендарьОбъект = Календарь.ПолучитьОбъект();
	КалендарьОбъект.ДатаОкончания = Макс(КалендарьОбъект.ДатаОкончания, '2016-12-31');
	КалендарьОбъект.Записать();
	
КонецПроцедуры


