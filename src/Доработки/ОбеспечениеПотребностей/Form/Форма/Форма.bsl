&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;
&НаКлиенте
Перем ЗапросыИзБД;
&НаКлиенте
Перем УтвержденияПроверкаТаблиц;

&НаКлиенте
Перем РаботаСДокументами;

&НаКлиенте
Перем Форма;

#Область ЮнитТестирование

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	
	РаботаСДокументами = КонтекстЯдра.Плагин("Plugin_РаботаСДокументами");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("ЗаказНаПроизводствоПоЗаказамКлиента");
	НаборТестов.Добавить("ЗаказНаПроизводствоПоЗаказамНаПроизводство");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	Попытка
		Форма.Закрыть();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

#Область Общие

&НаСервере
Функция ПолучитьМакет(ИмяМакета = "Данные")
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	
КонецФункции

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ЗаказНаПроизводствоПоЗаказамКлиента() Экспорт
	
	Макет = ПолучитьМакет("Ссылки");
	Ссылки = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	РаботаСДокументами.УдалитьДокументыПоОрганизации(Ссылки.Организация);
	
	Макет = ПолучитьМакет("ЗаказНаПроизводствоПоЗаказамКлиента");
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	РаботаСДокументами.ПровестиДокумент(СтруктураДанных.ЗаказКлиента1);
	
	ПараметрыФормы = Новый Структура("ОтборПоТипуОбеспечения", ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Производство"));
	
	Форма = ПолучитьФорму("Обработка.ОбеспечениеПотребностей.Форма", ПараметрыФормы);
	Форма.Открыть();
	
	Форма.ОтборПоПодразделению = Ссылки.Подразделение;
	Форма.ОтборПоПодразделениюПриИзменении(Форма.Элементы.ОтборПоПодразделению);
	
	Форма.Далее(Форма.Команды.Далее); // Шаг2 - Способ обеспечения
	Форма.Далее(Форма.Команды.Далее); // Шаг4 - Товары
	
	Утверждения.ПроверитьРавенство(Форма.Объект.ЗаказыКОбеспечению.Количество(), 1, "Должна быть одна строка товаров");
	Утверждения.ПроверитьРавенство(Форма.Объект.ЗаказыКОбеспечению.Итог("КЗаказу"), 25, "Количество должно быть 25");
	
	Форма.Элементы.ЗаказыКОбеспечению.ТекущаяСтрока = Форма.Объект.ЗаказыКОбеспечению[0].ПолучитьИдентификатор();
	Форма.ОтметитьКЗаказуЗаказы(Форма.Команды.ОтметитьКЗаказуЗаказы);
	
	Утверждения.ПроверитьРавенство(Форма._ИтогоКЗаказу, 25, "Количество итого должно быть 25");
	
	Форма.Далее(Форма.Команды.Далее); // Шаг5 - Заказы
	
	Утверждения.ПроверитьРавенство(Форма.ТаблицаДокументы.Количество(), 1, "Должна быть одна строка документов");
	ЗаказНаПроизводство = Форма.ТаблицаДокументы[0].Документ;
	
	КоличествоПоДокументу = ИтогоКоличествоПоДокументу(ЗаказНаПроизводство, "Продукция");
	Утверждения.ПроверитьРавенство(КоличествоПоДокументу, 25, "Количество итого должно быть 25");
	
	Форма.ОтборПоПодразделению = Неопределено;
	Форма.ОтборПоПодразделениюПриИзменении(Форма.Элементы.ОтборПоПодразделению);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоПоЗаказамНаПроизводство() Экспорт
	
	Макет = ПолучитьМакет("Ссылки");
	Ссылки = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	РаботаСДокументами.УдалитьДокументыПоОрганизации(Ссылки.Организация);
	
	Макет = ПолучитьМакет("ЗаказНаПроизводствоПоЗаказамНаПроизводство");
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	РаботаСДокументами.ПровестиДокумент(СтруктураДанных.ЗаказНаПроизводство1);
	
	ПараметрыФормы = Новый Структура("ОтборПоТипуОбеспечения", ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Производство"));
	
	Форма = ПолучитьФорму("Обработка.ОбеспечениеПотребностей.Форма", ПараметрыФормы);
	Форма.Открыть();
	
	Форма.ОтборПоПодразделению = Ссылки.ПодразделениеПФ;
	Форма.ОтборПоПодразделениюПриИзменении(Форма.Элементы.ОтборПоПодразделению);
	
	Форма.Далее(Форма.Команды.Далее); // Шаг2 - Способ обеспечения
	Форма.Далее(Форма.Команды.Далее); // Шаг4 - Товары
	
	Утверждения.ПроверитьРавенство(Форма.Объект.ЗаказыКОбеспечению.Количество(), 1, "Должна быть одна строка товаров");
	Утверждения.ПроверитьРавенство(Форма.Объект.ЗаказыКОбеспечению.Итог("КЗаказу"), 25, "Количество должно быть 25");
	
	Форма.Элементы.ЗаказыКОбеспечению.ТекущаяСтрока = Форма.Объект.ЗаказыКОбеспечению[0].ПолучитьИдентификатор();
	Форма.ОтметитьКЗаказуЗаказы(Форма.Команды.ОтметитьКЗаказуЗаказы);
	
	Утверждения.ПроверитьРавенство(Форма._ИтогоКЗаказу, 25, "Количество итого должно быть 25");
	
	Форма.Далее(Форма.Команды.Далее); // Шаг5 - Заказы
	
	Утверждения.ПроверитьРавенство(Форма.ТаблицаДокументы.Количество(), 1, "Должна быть одна строка документов");
	ЗаказНаПроизводство = Форма.ТаблицаДокументы[0].Документ;
	
	КоличествоПоДокументу = ИтогоКоличествоПоДокументу(ЗаказНаПроизводство, "Продукция");
	Утверждения.ПроверитьРавенство(КоличествоПоДокументу, 25, "Количество итого должно быть 25");
	
	Форма.ОтборПоПодразделению = Неопределено;
	Форма.ОтборПоПодразделениюПриИзменении(Форма.Элементы.ОтборПоПодразделению);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИтогоКоличествоПоДокументу(Ссылка, ИмяТЧ)
	
	Возврат Ссылка[ИмяТЧ].Итог("Количество");
	
КонецФункции	

#КонецОбласти
