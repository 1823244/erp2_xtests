&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;
&НаКлиенте
Перем ЗапросыИзБД;
&НаКлиенте
Перем УтвержденияПроверкаТаблиц;

&НаКлиенте
Перем РаботаСДокументами;

&НаКлиенте
Перем Форма;

#Область ЮнитТестирование

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	
	РаботаСДокументами = КонтекстЯдра.Плагин("Plugin_РаботаСДокументами");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.Добавить("КоличествоМест");
	НаборТестов.Добавить("КоличествоМестОбеспечение");
	НаборТестов.Добавить("КоличествоМестОбеспечениеСводно");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	Попытка
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КоличествоМест() Экспорт
	
	Макет = ПолучитьМакет();
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтруктураДанных.ЗаказКлиента1);
	
	Форма = ПолучитьФорму("Документ.ЗаказКлиента.ФормаОбъекта", ПараметрыФормы);
	Форма.Открыть();
	
	Утверждения.ПроверитьРавенство(Форма.Элементы._КоличествоМест.Видимость, Истина, "Нет поля Количество мест");
	Утверждения.ПроверитьРавенство(Форма.Элементы.Товары.Подвал, Истина, "Нет подвала");
	
	СтрокаТЧ = Форма.Объект.Товары[0];
	СтрокаТЧ._КоличествоМест = 1;
	
	Форма.Элементы.Товары.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
	Форма._КоличествоМестПриИзменении(Форма.Элементы._КоличествоМест);
	
	Утверждения.ПроверитьРавенство(0.5, СтрокаТЧ.Количество, "Не рассчиталось количество");
	Утверждения.ПроверитьРавенство(500, СтрокаТЧ.Сумма,      "Не рассчиталась сумма");
	
	Форма._ПересчитатьКоличествоМест();
	
КонецПроцедуры	

&НаКлиенте
Процедура КоличествоМестОбеспечениеСводно() Экспорт
	
	Макет = ПолучитьМакет("Ссылки");
	Ссылки = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	РаботаСДокументами.УдалитьДокументыПоОрганизации(Ссылки.Организация);
	
	Макет = ПолучитьМакет("ДанныеОбеспечение");
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	РаботаСДокументами.ПровестиДокумент(СтруктураДанных.ПоступлениеТоваровИУслуг1);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтруктураДанных.ЗаказКлиента1);
	
	Форма = ПолучитьФорму("Документ.ЗаказКлиента.ФормаОбъекта", ПараметрыФормы);
	Форма.Открыть();
	
	СтрокаТЧ = Форма.Объект.Товары[0];
	Форма.Элементы.Товары.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
	
	Струкутра = Новый Структура;
	
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	
	Струкутра.Вставить("ПереченьВариантов", Массив);
	Струкутра.Вставить("ЗаполнятьЦелымиУпаковками", Ложь);
	
	ФормаВыбора = ПолучитьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа",, Форма);
	ФормаВыбора.ОповеститьОВыборе(Струкутра);
	
	Утверждения.ПроверитьРавенство(2,  Форма.Объект.Товары.Количество(), "Не верное количество строк");
	Утверждения.ПроверитьРавенство(50, Форма.Объект.Товары.Итог("_КоличествоМест"), "Не верное итоговое количество мест");
	
	Форма.Модифицированность = Ложь;
	
КонецПроцедуры	

&НаКлиенте
Процедура КоличествоМестОбеспечение() Экспорт
	
	Макет = ПолучитьМакет("Ссылки");
	Ссылки = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	РаботаСДокументами.УдалитьДокументыПоОрганизации(Ссылки.Организация);
	
	Макет = ПолучитьМакет("ДанныеОбеспечение");
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	РаботаСДокументами.ПровестиДокумент(СтруктураДанных.ПоступлениеТоваровИУслуг1);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтруктураДанных.ЗаказКлиента1);
	
	Форма = ПолучитьФорму("Документ.ЗаказКлиента.ФормаОбъекта", ПараметрыФормы);
	Форма.Открыть();
	
	СтрокаТЧ = Форма.Объект.Товары[0];
	Форма.Элементы.Товары.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
	
	Массив = Новый Массив;
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
	Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(Форма.Объект, Форма.УникальныйИдентификатор);
	
	ФормаВыбора = ПолучитьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы, Форма);
	ФормаВыбора.Открыть();
	
	ФормаВыбора.Элементы.Действия.ТекущаяСтрока = 0;
	СтрокаТаблицы = ФормаВыбора.Действия.НайтиПоИдентификатору(0);
	ВыбратьНаКлиенте(ФормаВыбора, СтрокаТаблицы);
	
	Утверждения.ПроверитьРавенство(2,  Форма.Объект.Товары.Количество(), "Не верное количество строк");
	Утверждения.ПроверитьРавенство(50, Форма.Объект.Товары.Итог("_КоличествоМест"), "Не верное итоговое количество мест");
	
	Форма._СвернутьтаблицуТоварыЗавершение(КодВозвратаДиалога.Да, Неопределено);
	Утверждения.ПроверитьРавенство(25000,  Форма.СуммаЗаказаноСЗалоговойТарой, "Не расчиталась итоговая сумма");
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьНаКлиенте(Форма, СтрокаТаблицы)

	Обособленно = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно");
	МассивВыбора = Новый Массив();

	МассивВыбора = Новый Массив();
	Если Форма.КоличествоОтгружено > 0 Тогда
		ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
		ЗначениеВыбора.ВариантОбеспечения   = Форма.Параметры.ТекущийВариант.ВариантОбеспечения;
		ЗначениеВыбора.ДатаОтгрузки         = Форма.Параметры.ТекущийВариант.ДатаДоступности;
		ЗначениеВыбора.Склад                = Форма.Параметры.ТекущийВариант.Склад;
		ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
		ЗначениеВыбора.Количество           = Форма.КоличествоОтгружено;
		ЗначениеВыбора.Вставить("Отгружено", 1);
		МассивВыбора.Добавить(ЗначениеВыбора);
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Форма.ВыбранныеДействия Цикл

		ЗначениеВыбора = ОбеспечениеКлиентСервер.СтруктураВариантаОбеспечения();
		ЗначениеВыбора.ВариантОбеспечения   = СтрокаТаблицы.ВариантОбеспечения;
		ЗначениеВыбора.ДатаОтгрузки         = СтрокаТаблицы.ДатаДоступности;
		ЗначениеВыбора.Склад                = СтрокаТаблицы.Склад;
		ЗначениеВыбора.Серия                = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
		ЗначениеВыбора.Количество           = СтрокаТаблицы.Количество;
		ЗначениеВыбора.Вставить("Отгружено", 0);

		Если Форма.КоличествоОтгружено > 0 И ЗначениеВыбора.ВариантОбеспечения = МассивВыбора[0].ВариантОбеспечения
			И ЗначениеВыбора.Склад = МассивВыбора[0].Склад Тогда

			МассивВыбора[0].Количество = МассивВыбора[0].Количество + ЗначениеВыбора.Количество;

		Иначе

			МассивВыбора.Добавить(ЗначениеВыбора);

		КонецЕсли;

	КонецЦикла;

	Форма.ОповеститьОВыборе(МассивВыбора);

КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения(Знач Объект, Знач УникальныйИдентификатор)

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован, Объект.Склад, РегистрыНакопления.ЗаказыКлиентов);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		0,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПараметрыЗаполнения);
		
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета = "Данные")
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	
КонецФункции
