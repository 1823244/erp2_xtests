Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;
Перем РаботаСДокументами;

#Область ЮнитТестирование

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	
	РаботаСДокументами = КонтекстЯдра.Плагин("Plugin_РаботаСДокументами");
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("РасширениеТипов");
	НаборТестов.Добавить("ВзаиморасчетыПоЗаказам");
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура РасширениеТипов() Экспорт
	
	Реквизит = Метаданные.Документы.ПоступлениеУслугПрочихАктивов.Реквизиты._ЗаказПоставщику;
	Результат = Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит);
	
	Утверждения.ПроверитьРавенство(Результат, Истина, "КритерииОтбора.СвязанныеДокументы");

КонецПроцедуры	

Процедура ВзаиморасчетыПоЗаказам() Экспорт
	
	СтруктураДанныхСсылки = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Организация");
	РаботаСДокументами.УдалитьДокументыПоОрганизации(СтруктураДанныхСсылки.Организация);
	
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Данные");
	
	РаботаСДокументами.ПровестиДокумент(СтруктураДанных.ЗаказПоставщику1);
	РаботаСДокументами.ПровестиДокумент(СтруктураДанных.ПоступлениеУслугИПрочихАктивов1);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", СтруктураДанныхСсылки.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
	|	РасчетыСПоставщикамиОстатки.ОплачиваетсяОстаток,
	|	РасчетыСПоставщикамиОстатки.КОплатеОстаток,
	|	РасчетыСПоставщикамиОстатки.КПоступлениюОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, АналитикаУчетаПоПартнерам.Организация = &Организация) КАК РасчетыСПоставщикамиОстатки";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Утверждения.ПроверитьРавенство(Таблица.Количество(), 1, "Количество строк");
	
	Утверждения.ПроверитьРавенство(Таблица[0].СуммаОстаток,        -1180, "СуммаОстаток");
	Утверждения.ПроверитьРавенство(Таблица[0].ОплачиваетсяОстаток, 0,     "ОплачиваетсяОстаток");
	Утверждения.ПроверитьРавенство(Таблица[0].КОплатеОстаток,      -1180, "КОплатеОстаток");
	Утверждения.ПроверитьРавенство(Таблица[0].КПоступлениюОстаток, 0,     "КПоступлениюОстаток");

КонецПроцедуры	
